[
  {
    "isInterface": false,
    "childClasses": [
      {
        "parentName": "TestClass",
        "isInterface": false,
        "childClasses": [],
        "enums": [],
        "hasEnums": false,
        "methods": [
          {
            "nameLine": "public Date getToday()",
            "nameLineNumber": 75,
            "scope": "public",
            "name": "getToday",
            "nameWithParams": "getToday()",
            "author": null,
            "date": null,
            "return": "Always today's date.",
            "example": "System.debug('Today is ' + getToday());\n",
            "param": null,
            "description": "Return today's date."
          }
        ],
        "hasMethods": true,
        "constructors": [],
        "hasConstructors": false,
        "properties": [
          {
            "name": "innerString",
            "nameLine": "public String innerString",
            "nameLineNumber": 65,
            "scope": "public",
            "description": null
          }
        ],
        "hasProperties": true,
        "nameLine": "public class InnerClass",
        "nameLineNumber": 63,
        "name": "TestClass.InnerClass",
        "className": "InnerClass",
        "scope": "public",
        "author": null,
        "date": null,
        "group": null,
        "group-content": null,
        "description": null,
        "isDocumented": false,
        "nElements": 3,
        "nDocumentedElements": 1,
        "elementCoverage": "33.33",
        "methodAnalysis": {
          "elementCoverage": "100.00",
          "nElements": 1,
          "nDocumentedElements": 1,
          "rating": {
            "good": true,
            "poor": false,
            "bad": false
          }
        },
        "propertyAnalysis": {
          "elementCoverage": "0.00",
          "nElements": 1,
          "nDocumentedElements": 0,
          "rating": {
            "good": false,
            "poor": false,
            "bad": true
          }
        },
        "constructorAnalysis": {
          "nElements": 0,
          "nDocumentedElements": 0,
          "elementCoverage": "0.00"
        },
        "childClassAnalysis": {
          "nElements": 0,
          "nDocumentedElements": 0,
          "elementCoverage": "0.00",
          "rating": {
            "good": false,
            "poor": false,
            "bad": true
          }
        },
        "hasChildClasses": false,
        "rating": {
          "good": false,
          "poor": false,
          "bad": true
        }
      }
    ],
    "enums": [
      {
        "parentName": "TestClass",
        "values": [
          "SPRING",
          "SUMMER",
          "FALL",
          "WINTER"
        ],
        "hasValues": true,
        "nameLine": "public enum Seasons",
        "nameLineNumber": 20,
        "scope": "public",
        "name": "TestClass.Seasons",
        "className": "Seasons",
        "description": "These are the seasons"
      }
    ],
    "hasEnums": true,
    "methods": [
      {
        "nameLine": "public Integer myMethod(Integer intParam, Integer notUsed)",
        "nameLineNumber": 44,
        "scope": "public",
        "name": "myMethod",
        "nameWithParams": "myMethod(Integer intParam, Integer notUsed)",
        "author": null,
        "date": null,
        "return": "Always returns param + 1;",
        "example": null,
        "param": [
          {
            "name": "intParam",
            "description": "The integer to method. This description wraps for multiple lines!"
          },
          {
            "name": "notUsed",
            "description": "This parameter is not used."
          }
        ],
        "description": "This is my sample method with a short description. <p> This is a longer description of the functionality provided by the method!",
        "hasParams": true
      }
    ],
    "hasMethods": true,
    "constructors": [
      {
        "nameLine": "public TestClass()",
        "nameLineNumber": 58,
        "scope": "public",
        "name": "TestClass",
        "nameWithParams": "TestClass()",
        "author": null,
        "date": null,
        "return": null,
        "example": "TestClass t = new TestClass();\n\nif(t.noDocBoolean != true) {\n  System.Debug('Whoa, not true dude.');\n}\n",
        "param": null,
        "description": "Standard constructor."
      }
    ],
    "hasConstructors": true,
    "properties": [
      {
        "name": "myInt",
        "nameLine": "public Integer myInt",
        "nameLineNumber": 10,
        "scope": "public",
        "description": "This is my test integer property."
      },
      {
        "name": "myString",
        "nameLine": "private String myString",
        "nameLineNumber": 15,
        "scope": "private",
        "description": "This is my test string property."
      },
      {
        "name": "noDocBoolean",
        "nameLine": "public Boolean noDocBoolean",
        "nameLineNumber": 27,
        "scope": "public",
        "description": null
      }
    ],
    "hasProperties": true,
    "nameLine": "public class TestClass",
    "nameLineNumber": 5,
    "name": "TestClass",
    "className": "TestClass",
    "scope": "public",
    "author": "Derrek Harrison",
    "date": "1-1-2014",
    "group": null,
    "group-content": null,
    "description": "This is my test class declaration.",
    "isDocumented": true,
    "nElements": 10,
    "nDocumentedElements": 7,
    "elementCoverage": "70.00",
    "methodAnalysis": {
      "elementCoverage": "100.00",
      "nElements": 1,
      "nDocumentedElements": 1,
      "rating": {
        "good": true,
        "poor": false,
        "bad": false
      }
    },
    "propertyAnalysis": {
      "elementCoverage": "75.00",
      "nElements": 4,
      "nDocumentedElements": 3,
      "rating": {
        "good": false,
        "poor": true,
        "bad": false
      }
    },
    "constructorAnalysis": {
      "elementCoverage": "100.00",
      "nElements": 1,
      "nDocumentedElements": 1,
      "rating": {
        "good": true,
        "poor": false,
        "bad": false
      }
    },
    "childClassAnalysis": {
      "nElements": 3,
      "nDocumentedElements": 1,
      "elementCoverage": "33.33",
      "rating": {
        "good": false,
        "poor": false,
        "bad": true
      }
    },
    "hasChildClasses": true,
    "rating": {
      "good": false,
      "poor": true,
      "bad": false
    }
  },
  {
    "isInterface": false,
    "childClasses": [
      {
        "parentName": "TestCoverage",
        "isInterface": false,
        "childClasses": [],
        "enums": [
          {
            "parentName": "TestCoverage.unDocumentedInnerClass",
            "values": [
              "ENUM1",
              "ENUM2",
              "ENUM3"
            ],
            "hasValues": true,
            "nameLine": "public enum innerEnum",
            "nameLineNumber": 69,
            "scope": "public",
            "name": "TestCoverage.unDocumentedInnerClass.innerEnum",
            "className": "innerEnum",
            "description": null
          }
        ],
        "hasEnums": true,
        "methods": [
          {
            "nameLine": "public Date getToday()",
            "nameLineNumber": 83,
            "scope": "public",
            "name": "getToday",
            "nameWithParams": "getToday()",
            "author": null,
            "date": null,
            "return": "Always today's date.",
            "example": "System.debug('Today is ' + getToday());\n",
            "param": null,
            "description": "Return today's date."
          }
        ],
        "hasMethods": true,
        "constructors": [],
        "hasConstructors": false,
        "properties": [
          {
            "name": "innerString",
            "nameLine": "public String innerString",
            "nameLineNumber": 67,
            "scope": "public",
            "description": null
          }
        ],
        "hasProperties": true,
        "nameLine": "public class unDocumentedInnerClass",
        "nameLineNumber": 65,
        "name": "TestCoverage.unDocumentedInnerClass",
        "className": "unDocumentedInnerClass",
        "scope": "public",
        "author": null,
        "date": null,
        "group": null,
        "group-content": null,
        "description": null,
        "isDocumented": false,
        "nElements": 4,
        "nDocumentedElements": 1,
        "elementCoverage": "25.00",
        "methodAnalysis": {
          "elementCoverage": "100.00",
          "nElements": 1,
          "nDocumentedElements": 1,
          "rating": {
            "good": true,
            "poor": false,
            "bad": false
          }
        },
        "propertyAnalysis": {
          "elementCoverage": "0.00",
          "nElements": 2,
          "nDocumentedElements": 0,
          "rating": {
            "good": false,
            "poor": false,
            "bad": true
          }
        },
        "constructorAnalysis": {
          "nElements": 0,
          "nDocumentedElements": 0,
          "elementCoverage": "0.00"
        },
        "childClassAnalysis": {
          "nElements": 0,
          "nDocumentedElements": 0,
          "elementCoverage": "0.00",
          "rating": {
            "good": false,
            "poor": false,
            "bad": true
          }
        },
        "hasChildClasses": false,
        "rating": {
          "good": false,
          "poor": false,
          "bad": true
        }
      }
    ],
    "enums": [
      {
        "parentName": "TestCoverage",
        "values": [
          "ENUM1",
          "ENUM2",
          "ENUM3"
        ],
        "hasValues": true,
        "nameLine": "public enum documentedEnum",
        "nameLineNumber": 18,
        "scope": "public",
        "name": "TestCoverage.documentedEnum",
        "className": "documentedEnum",
        "description": "Documented Enum"
      },
      {
        "parentName": "TestCoverage",
        "values": [
          "ENUM1",
          "ENUM2",
          "ENUM3"
        ],
        "hasValues": true,
        "nameLine": "public enum unDocumentedEnum",
        "nameLineNumber": 24,
        "scope": "public",
        "name": "TestCoverage.unDocumentedEnum",
        "className": "unDocumentedEnum",
        "description": null
      }
    ],
    "hasEnums": true,
    "methods": [
      {
        "nameLine": "public Integer documentedMethod(Integer intParam, Integer notUsed)",
        "nameLineNumber": 42,
        "scope": "public",
        "name": "documentedMethod",
        "nameWithParams": "documentedMethod(Integer intParam, Integer notUsed)",
        "author": null,
        "date": null,
        "return": "Always returns param + 1;",
        "example": null,
        "param": [
          {
            "name": "intParam",
            "description": "The integer to method."
          },
          {
            "name": "notUsed",
            "description": "This parameter is not used."
          }
        ],
        "description": "This is my sample method with a short description. <p> This is a longer description of the functionality provided by the method!",
        "hasParams": true
      },
      {
        "nameLine": "public Integer undocumentedMethod(Integer intParam, Integer notUsed)",
        "nameLineNumber": 46,
        "scope": "public",
        "name": "undocumentedMethod",
        "nameWithParams": "undocumentedMethod(Integer intParam, Integer notUsed)",
        "author": null,
        "date": null,
        "return": null,
        "example": null,
        "param": null,
        "description": null
      }
    ],
    "hasMethods": true,
    "constructors": [
      {
        "nameLine": "public TestCoverage()",
        "nameLineNumber": 56,
        "scope": "public",
        "name": "TestCoverage",
        "nameWithParams": "TestCoverage()",
        "author": null,
        "date": null,
        "return": null,
        "example": "TestClass2 t = new TestClass2();\n",
        "param": null,
        "description": "Standard constructor."
      },
      {
        "nameLine": "public TestCoverage(String unDocumented)",
        "nameLineNumber": 60,
        "scope": "public",
        "name": "TestCoverage",
        "nameWithParams": "TestCoverage(String unDocumented)",
        "author": null,
        "date": null,
        "return": null,
        "example": null,
        "param": null,
        "description": null
      }
    ],
    "hasConstructors": true,
    "properties": [
      {
        "name": "documentedProperty",
        "nameLine": "public Integer documentedProperty",
        "nameLineNumber": 11,
        "scope": "public",
        "description": "Documented Property"
      },
      {
        "name": "undocumentedProperty",
        "nameLine": "public Integer undocumentedProperty",
        "nameLineNumber": 13,
        "scope": "public",
        "description": null
      }
    ],
    "hasProperties": true,
    "nameLine": "public class TestCoverage",
    "nameLineNumber": 5,
    "name": "TestCoverage",
    "className": "TestCoverage",
    "scope": "public",
    "author": "Derrek Harrison",
    "date": "1-1-2014",
    "group": null,
    "group-content": null,
    "description": "This is my test class declaration.",
    "isDocumented": true,
    "nElements": 13,
    "nDocumentedElements": 6,
    "elementCoverage": "46.15",
    "methodAnalysis": {
      "elementCoverage": "50.00",
      "nElements": 2,
      "nDocumentedElements": 1,
      "rating": {
        "good": false,
        "poor": false,
        "bad": true
      }
    },
    "propertyAnalysis": {
      "elementCoverage": "50.00",
      "nElements": 4,
      "nDocumentedElements": 2,
      "rating": {
        "good": false,
        "poor": false,
        "bad": true
      }
    },
    "constructorAnalysis": {
      "elementCoverage": "50.00",
      "nElements": 2,
      "nDocumentedElements": 1,
      "rating": {
        "good": false,
        "poor": false,
        "bad": true
      }
    },
    "childClassAnalysis": {
      "nElements": 4,
      "nDocumentedElements": 1,
      "elementCoverage": "25.00",
      "rating": {
        "good": false,
        "poor": false,
        "bad": true
      }
    },
    "hasChildClasses": true,
    "rating": {
      "good": false,
      "poor": false,
      "bad": true
    }
  }
]